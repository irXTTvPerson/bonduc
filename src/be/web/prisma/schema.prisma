// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DraftAccount {
  created_at      DateTime @default(now())
  email           String   @unique
  password        String
  address         String   @unique
  family          String
  token           String   @unique
  screen_name     String
  identifier_name String   @unique
}

model Account {
  id                  String                @id @unique @default(dbgenerated("gen_random_uuid()"))
  created_at          DateTime              @default(now())
  updated_at          DateTime?             @updatedAt
  last_pod_at         DateTime?
  email               String                @unique
  password            String
  ip_address          String[]
  screen_name         String
  inbox               String
  outbox              String
  follower_uri        String
  following_uri       String
  identifier_name     String                @unique
  header_uri          String                @default("/img/default_header.png")
  icon_uri            String                @default("/img/default_icon.png")
  account_unique_uri  String                @unique
  bio                 String?
  pod_count           Int                   @default(0)
  following_count     Int                   @default(0)
  follower_count      Int                   @default(0)
  Pod                 Pod[]
  Favorite            Favorite[]
  DpPod               DpPod[]
  FollowRequest       FollowRequest[]
  AcceptFollowRequest AcceptFollowRequest[]
  RejectFollowRequest RejectFollowRequest[]
  NotifyFollowed      NotifyFollowed[]
  Follow              Follow[]
  QpPod               QpPod[]
}

enum PodVisibility {
  anyone
  login // loggedin account only
  following
  follower
  mutual // mutual following account only
  mention // mentioned account only
  list // listed in account only
  myself // just myself only
}

enum TimelineType {
  home
  local
  global
}

enum DpContentType {
  pod
  qp
}

enum QpContentType {
  pod
  qp
}

model Pod {
  id             String        @id @unique @default(dbgenerated("gen_random_uuid()"))
  created_at     DateTime      @default(now())
  updated_at     DateTime?     @updatedAt
  to             String[]
  cc             String[]
  from           Account       @relation(fields: [account_id], references: [id])
  account_id     String
  body           String
  favorite_count Int           @default(0)
  rp_count       Int           @default(0)
  visibility     PodVisibility @default(login)
  password       Json?
  timeline_type  TimelineType  @default(global)
}

model DpPod {
  id            String        @id @unique @default(dbgenerated("gen_random_uuid()"))
  created_at    DateTime      @default(now())
  to            String[]
  cc            String[]
  from          Account       @relation(fields: [account_id], references: [id])
  account_id    String
  visibility    PodVisibility @default(login)
  content_id    String // podかqpのid
  content_type  DpContentType
  timeline_type TimelineType  @default(global)

  @@unique([account_id, content_id, content_type])
}

model QpPod {
  id             String        @id @unique @default(dbgenerated("gen_random_uuid()"))
  created_at     DateTime      @default(now())
  updated_at     DateTime?     @updatedAt
  to             String[]
  cc             String[]
  from           Account       @relation(fields: [account_id], references: [id])
  account_id     String
  body           String
  favorite_count Int           @default(0)
  rp_count       Int           @default(0)
  visibility     PodVisibility @default(login)
  content_id     String // podかqpのid
  content_type   QpContentType
  timeline_type  TimelineType  @default(global)

  @@unique([account_id, content_id, content_type])
}

enum NotifyType {
  FollowRequest
  AcceptFollowRequest
  RejectFollowRequest
  Followed
  INVALID
}

model FollowRequest {
  from_account_id String
  created_at      DateTime @default(now())
  to_account_id   String
  opened          Boolean  @default(false)
  from            Account  @relation(fields: [from_account_id], references: [id])

  @@unique([from_account_id, to_account_id])
}

model AcceptFollowRequest {
  from_account_id String
  created_at      DateTime @default(now())
  to_account_id   String
  opened          Boolean  @default(false)
  from            Account  @relation(fields: [from_account_id], references: [id])

  @@unique([from_account_id, to_account_id])
}

model RejectFollowRequest {
  from_account_id String
  created_at      DateTime @default(now())
  to_account_id   String
  opened          Boolean  @default(false)
  from            Account  @relation(fields: [from_account_id], references: [id])

  @@unique([from_account_id, to_account_id])
}

model NotifyFollowed {
  from_account_id String
  created_at      DateTime @default(now())
  to_account_id   String
  opened          Boolean  @default(false)
  from            Account  @relation(fields: [from_account_id], references: [id])

  @@unique([from_account_id, to_account_id])
}

model Follow {
  from_account_id String
  from            Account  @relation(fields: [from_account_id], references: [id])
  created_at      DateTime @default(now())
  to_account_id   String

  @@unique([from_account_id, to_account_id])
}

model Favorite {
  created_at DateTime @default(now())
  from       Account  @relation(fields: [account_id], references: [id])
  content_id String // podかqpのid
  account_id String

  @@unique([content_id, account_id])
}
